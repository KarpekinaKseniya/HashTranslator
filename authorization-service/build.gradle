plugins {
    id 'idea'
    id 'java'
    id "jacoco"
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

repositories {
    mavenCentral()
}

group = 'tt.authorization'
version = '0.0.1'

sourceCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    enabled = false // to prevent create plain jar
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.validation:validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.flywaydb:flyway-core:9.15.0'

    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly "org.hsqldb:hsqldb"

    testImplementation "io.rest-assured:rest-assured"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "net.javacrumbs.json-unit:json-unit:2.36.0"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = ["**/config/*", "**/domain/*", "**/AuthorizationApplication*.*"]
        }
    }
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/config/*", "**/domain/*", "**/AuthorizationApplication*.*"])
        }))
    }
}